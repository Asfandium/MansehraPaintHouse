@model IEnumerable<MansehraPaintHouse.Core.Entities.Category>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Categories</h3>
    </div>
    <div class="card-body border-bottom py-3">
        <div class="d-flex">
            <div class="text-muted">
                Show
                <div class="mx-2 d-inline-block">
                    <input type="text" class="form-control form-control-sm" value="8" size="3" aria-label="Categories count">
                </div>
                entries
            </div>
            <div class="ms-auto text-muted">
                Search:
                <div class="ms-2 d-inline-block">
                    <input type="text" class="form-control form-control-sm" id="searchInput" aria-label="Search category">
                </div>
            </div>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table card-table table-vcenter text-nowrap datatable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Parent Category</th>
                    <th>Description</th>
                    <th>Images</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Model)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td>
                            @if (category.ParentCategoryID.HasValue)
                            {
                                var parentCategory = Model.FirstOrDefault(c => c.CategoryID == category.ParentCategoryID);
                                @parentCategory?.Name
                            }
                            else
                            {
                                <span class="text-muted">Master Category</span>
                            }
                        </td>
                        <td>@category.Description</td>
                        <td>
                            <div class="d-flex gap-2">
                                @if (!string.IsNullOrEmpty(category.Image1))
                                {
                                    <img src="@category.Image1" alt="Image 1" style="max-width: 50px; height: auto;" class="rounded" />
                                }
                                @if (!string.IsNullOrEmpty(category.Image2))
                                {
                                    <img src="@category.Image2" alt="Image 2" style="max-width: 50px; height: auto;" class="rounded" />
                                }
                            </div>
                        </td>
                        <td>
                            @if (category.IsActive)
                            {
                                <span class="badge bg-success me-1">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-danger me-1">Inactive</span>
                            }
                        </td>
                        <td class="text-end">
                            <div class="btn-list flex-nowrap">
                                <a asp-action="A_CategoryUpsert" asp-controller="A_Category" asp-route-id="@category.CategoryID" class="btn btn-primary btn-sm">
                                    Edit
                                </a>
                                <button type="button" class="btn btn-danger btn-sm" onclick="confirmDelete(@category.CategoryID)">
                                    Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="card-footer d-flex align-items-center">
        <p class="m-0 text-muted">Showing <span>1</span> to <span>8</span> of <span>@Model.Count()</span> entries</p>
        <ul class="pagination m-0 ms-auto">
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M15 6l-6 6l6 6" /></svg>
                    prev
                </a>
            </li>
            <li class="page-item active"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" href="#">
                    next
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 6l6 6l-6 6" /></svg>
                </a>
            </li>
        </ul>
    </div>
</div>

<div class="mt-3">
    <a asp-action="A_CategoryUpsert" asp-controller="A_Category" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
        Create New Category
    </a>
</div>

@section Scripts {
    <script>
        //delete sweet alert
        function confirmDelete(categoryId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/A_Category/Delete/${categoryId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    }).then(response => {
                        if (response.ok) {
                            Swal.fire(
                                'Deleted!',
                                'The category has been deleted successfully.',
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'There was an issue deleting the category. Please try again.',
                                'error'
                            );
                        }
                    }).catch(error => {
                        Swal.fire(
                            'Error!',
                            'An unexpected error occurred. Please try again later.',
                            'error'
                        );
                    });
                }
            });
        }

        //SearchBar Functionality

        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');

            searchInput.addEventListener('keyup', function() {
                const searchText = this.value.toLowerCase();
                const tableRows = document.querySelectorAll('.datatable tbody tr');

                tableRows.forEach(row => {
                    let text = '';
                    // Get text from Name, Parent Category, Description, and Status columns
                    const cells = row.getElementsByTagName('td');

                    // Name
                    text += cells[0].textContent.toLowerCase() + ' ';

                    // Parent Category
                    text += cells[1].textContent.toLowerCase() + ' ';

                    // Description
                    text += cells[2].textContent.toLowerCase() + ' ';

                    // Status (Active/Inactive)
                    text += cells[4].textContent.toLowerCase() + ' ';

                    // Show/hide rows based on search
                    if (text.includes(searchText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });

                updateEntriesInfo();
            });
        });

        function updateEntriesInfo() {
            const totalRows = document.querySelectorAll('.datatable tbody tr').length;
            const visibleRows = document.querySelectorAll('.datatable tbody tr:not([style*="display: none"])').length;
            const infoText = document.querySelector('.card-footer p.text-muted');

            if (visibleRows === totalRows) {
                infoText.innerHTML = `Showing <span>1</span> to <span>${totalRows}</span> of <span>${totalRows}</span> entries`;
            } else {
                infoText.innerHTML = `Showing <span>${visibleRows}</span> filtered entries (from <span>${totalRows}</span> total entries)`;
            }
        }


    </script>
}