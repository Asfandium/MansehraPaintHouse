@model PaginatedList<MansehraPaintHouse.Core.Entities.Category>

<div class="card">
    @Html.AntiForgeryToken()
    <div class="card-header">
        <h3 class="card-title">Categories</h3>
    </div>
    <div class="card-body border-bottom py-3">
        <div class="d-flex">
            <div class="text-muted">
                Show
                <div class="mx-2 d-inline-block">
                    <input type="text"
                           class="form-control form-control-sm"
                           value="@Model.PageSize"
                           size="3"
                           id="pageSizeInput"
                           aria-label="Categories count">
                </div>
                entries
            </div>
            <div class="ms-auto text-muted">
                Search:
                <div class="ms-2 d-inline-block">
                    <input type="text" class="form-control form-control-sm" id="searchInput" aria-label="Search category">
                </div>
            </div>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table card-table table-vcenter text-nowrap datatable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Parent Category</th>
                    <th>Description</th>
                    <th>Images</th>
                    <th>Status</th>
                    <th>Actions</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Model)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td>
                            @if (category.ParentCategoryID.HasValue)
                            {
                                var parentCategory = Model.FirstOrDefault(c => c.CategoryID == category.ParentCategoryID);
                                @parentCategory?.Name
                            }
                            else
                            {
                                <span class="text-muted">Master Category</span>
                            }
                        </td>
                        <td>@category.Description</td>
                        <td>
                            <div class="d-flex gap-2">
                                @if (!string.IsNullOrEmpty(category.Image1))
                                {
                                    <img src="@category.Image1" alt="Image 1" style="max-width: 50px; height: auto;" class="rounded" />
                                }
                                @if (!string.IsNullOrEmpty(category.Image2))
                                {
                                    <img src="@category.Image2" alt="Image 2" style="max-width: 50px; height: auto;" class="rounded" />
                                }
                            </div>
                        </td>
                        <td>
                            @if (category.IsActive)
                            {
                                <span class="badge bg-success me-1">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-danger me-1">InActive</span>
                            }
                        </td>
                        <td class="text-end">
                            <div class="btn-list flex-nowrap">
                                <a asp-action="A_CategoryUpsert" asp-controller="A_Category" asp-route-id="@category.CategoryID" class="btn btn-primary btn-sm">
                                    Edit
                                </a>
                                @if (category.IsActive)
                                {
                                    <button type="button" class="btn btn-danger btn-sm" onclick="confirmDelete(@category.CategoryID)">
                                        Delete
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-success btn-sm" onclick="confirmDelete(@category.CategoryID)">
                                        Activate
                                    </button>
                                }
                            </div>
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="card-footer d-flex align-items-center">
        <p class="m-0 text-muted">
            Showing <span>@((Model.PageIndex - 1) * Model.PageSize + 1)</span>
            to <span>@Math.Min(Model.PageIndex * Model.PageSize, Model.TotalItems)</span>
            of <span>@Model.TotalItems</span> entries
        </p>
        <ul class="pagination m-0 ms-auto">
            <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                <a class="page-link"
                   asp-action="A_CategoryIndex"
                   asp-route-pageNumber="@(Model.PageIndex - 1)"
                   asp-route-pageSize="@Model.PageSize"
                   tabindex="-1"
                   aria-disabled="@(!Model.HasPreviousPage)">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M15 6l-6 6l6 6" /></svg>
                    prev
                </a>
            </li>

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link"
                       asp-action="A_CategoryIndex"
                       asp-route-pageNumber="@i"
                       asp-route-pageSize="@Model.PageSize">@i</a>
                </li>
            }

            <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                <a class="page-link"
                   asp-action="A_CategoryIndex"
                   asp-route-pageNumber="@(Model.PageIndex + 1)"
                   asp-route-pageSize="@Model.PageSize">
                    next
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 6l6 6l-6 6" /></svg>
                </a>
            </li>
        </ul>
    </div>
</div>

<div class="mt-3">
    <a asp-action="A_CategoryUpsert" asp-controller="A_Category" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
        Create New Category
    </a>
</div>

@section Scripts {
    <script>
        //delete sweet alert
             function confirmDelete(categoryId) {
            // Get the status of the category from the row
            const row = document.querySelector(`button[onclick="confirmDelete(${categoryId})"]`).closest('tr');
            const isActive = row.querySelector('.badge').textContent.trim() === 'Active';

            Swal.fire({
                title: isActive ? 'Are you sure?' : 'Activate Category?',
                text: isActive ? "You won't be able to revert this!" : "Do you want to activate this category?",
                icon: isActive ? 'warning' : 'question',
                showCancelButton: true,
                confirmButtonColor: isActive ? '#d33' : '#28a745',
                cancelButtonColor: '#3085d6',
                confirmButtonText: isActive ? 'Yes, deactivate it!' : 'Yes, activate it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch(`/A_Category/ToggleStatus/${categoryId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        }
                    }).then(response => {
                        if (response.ok) {
                            Swal.fire({
                                title: isActive ? 'Deactivated!' : 'Activated!',
                                text: isActive ? 'The category has been deactivated successfully.' : 'The category has been activated successfully.',
                                icon: 'success',
                                confirmButtonColor: '#28a745'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error('Network response was not ok');
                        }
                    }).catch(error => {
                        Swal.fire({
                            title: 'Error!',
                            text: `There was an issue ${isActive ? 'deactivating' : 'activating'} the category. Please try again.`,
                            icon: 'error',
                            confirmButtonColor: '#d33'
                        });
                    });
                }
            });
        }

        //SearchBar Functionality

        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');

            searchInput.addEventListener('keyup', function() {
                const searchText = this.value.toLowerCase();
                const tableRows = document.querySelectorAll('.datatable tbody tr');

                tableRows.forEach(row => {
                    let text = '';
                    // Get text from Name, Parent Category, Description, and Status columns
                    const cells = row.getElementsByTagName('td');

                    // Name
                    text += cells[0].textContent.toLowerCase() + ' ';

                    // Parent Category
                    text += cells[1].textContent.toLowerCase() + ' ';

                    // Description
                    text += cells[2].textContent.toLowerCase() + ' ';

                    // Status (Active/Inactive)
                    text += cells[4].textContent.toLowerCase() + ' ';

                    // Show/hide rows based on search
                    if (text.includes(searchText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });

                updateEntriesInfo();
            });
        });

        function updateEntriesInfo() {
            const totalRows = document.querySelectorAll('.datatable tbody tr').length;
            const visibleRows = document.querySelectorAll('.datatable tbody tr:not([style*="display: none"])').length;
            const infoText = document.querySelector('.card-footer p.text-muted');

            if (visibleRows === totalRows) {
                infoText.innerHTML = `Showing <span>1</span> to <span>${totalRows}</span> of <span>${totalRows}</span> entries`;
            } else {
                infoText.innerHTML = `Showing <span>${visibleRows}</span> filtered entries (from <span>${totalRows}</span> total entries)`;
            }
        }

        // Pagination code

        document.getElementById('pageSizeInput').addEventListener('change', function() {
            const pageSize = parseInt(this.value) || 8;
            if (pageSize > 0) {
                window.location.href = '@Url.Action("A_CategoryIndex")?pageSize=' + pageSize + '&pageNumber=1';
            }
        });

    </script>
}